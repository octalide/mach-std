use target;
use std.io.fs;
use std.types.string;

var env_blob_data: *u8;
var env_blob_len: u64;
var env_loaded: u8;

fun ensure_env_blob() u8 {
    if (env_loaded != 0) {
        if (env_blob_data != nil && env_blob_len != 0) {
            ret 1;
        }

        ret 0;
    }

    env_loaded = 1;

    if (OS != OS_LINUX) {
        ret 0;
    }

    val blob: []u8 = fs_read_all("/proc/self/environ");

    if (blob.data == nil || blob.length == 0) {
        env_blob_data = nil;
        env_blob_len = 0;
        ret 0;
    }

    env_blob_data = blob.data;
    env_blob_len = blob.length;

    ret 1;
}

pub fun env_get(name: string) []u8 {
    if (name.length == 0) {
        ret []u8{ nil, 0 };
    }

    if (ensure_env_blob() == 0) {
        ret []u8{ nil, 0 };
    }

    val target_len: u64 = name.length;
    val data: *u8 = env_blob_data;
    val total: u64 = env_blob_len;

    var pos: u64 = 0;
    for (pos < total) {
        val segment_start: u64 = pos;

        for (pos < total && @(data + pos) != 0) {
            pos = pos + 1;
        }

        val segment_end: u64 = pos;
        val segment_len: u64 = segment_end - segment_start;

        if (segment_len > target_len) {
            var match: u8 = 1;
            var idx: u64 = 0;

            for (idx < target_len) {
                val a: u8 = @(data + segment_start + idx);
                val b: u8 = @(name.data + idx);

                if (a != b) {
                    match = 0;
                    brk;
                }

                idx = idx + 1;
            }

            if (match == 1 && (segment_start + target_len) < segment_end && @(data + segment_start + target_len) == '=') {
                val value_start: u64 = segment_start + target_len + 1;
                val value_len: u64 = segment_len - target_len - 1;

                ret []u8{ data + value_start, value_len };
            }
        }

        if (pos >= total) {
            brk;
        }

        pos = pos + 1;
    }

    ret []u8{ nil, 0 };
}
