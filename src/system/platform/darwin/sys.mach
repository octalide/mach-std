use std.system.platform.darwin.syscall;

pub val DARWIN_SYS_READ:          u64 = 0x2000003;
pub val DARWIN_SYS_WRITE:         u64 = 0x2000004;
pub val DARWIN_SYS_OPEN:          u64 = 0x2000005;
pub val DARWIN_SYS_CLOSE:         u64 = 0x2000006;
pub val DARWIN_SYS_MMAP:          u64 = 0x20000c5;
pub val DARWIN_SYS_MUNMAP:        u64 = 0x2000049;
pub val DARWIN_SYS_OPENAT:        u64 = 0x20001cf;
pub val DARWIN_SYS_CLOCK_GETTIME: u64 = 0x2000126;

pub val DARWIN_AT_FDCWD: i32 = -100;

pub fun darwin_read(fd: i32, buf: *u8, count: u64) i64 {
    ret syscall3(DARWIN_SYS_READ, (fd :: u64), (buf :: u64), count);
}

pub fun darwin_write(fd: i32, buf: *u8, count: u64) i64 {
    ret syscall3(DARWIN_SYS_WRITE, (fd :: u64), (buf :: u64), count);
}

pub fun darwin_open(path: *u8, flags: i32, mode: i32) i64 {
    ret syscall3(DARWIN_SYS_OPEN, (path :: u64), (flags :: u64), (mode :: u64));
}

pub fun darwin_openat(dirfd: i32, path: *u8, flags: i32, mode: i32) i64 {
    ret syscall4(DARWIN_SYS_OPENAT, (dirfd :: u64), (path :: u64), (flags :: u64), (mode :: u64));
}

pub fun darwin_close(fd: i32) i32 {
    val res: i64 = syscall1(DARWIN_SYS_CLOSE, (fd :: u64));
    ret res :: i32;
}

pub fun darwin_mmap(addr: *u8, length: u64, prot: i32, flags: i32, fd: i32, offset: i64) *u8 {
    val res: i64 = syscall6(
        DARWIN_SYS_MMAP,
        (addr :: u64),
        length,
        (prot :: u64),
        (flags :: u64),
        (fd :: u64),
        (offset :: u64)
    );

    if (res < 0) {
        ret nil;
    }

    ret (res :: u64) :: *u8;
}

pub fun darwin_munmap(addr: *u8, length: u64) i32 {
    val res: i64 = syscall2(DARWIN_SYS_MUNMAP, (addr :: u64), length);
    if (res < 0) {
        ret -1;
    }
    ret 0;
}

pub fun darwin_clock_gettime(clock_id: i32, ts: *u8) i32 {
    val res: i64 = syscall2(DARWIN_SYS_CLOCK_GETTIME, (clock_id :: u64), (ts :: u64));

    if (res < 0) {
        ret -1;
    }

    ret 0;
}
