use target;

pub val MEM_COMMIT:        u32 = 0x00001000;
pub val MEM_RESERVE:       u32 = 0x00002000;
pub val MEM_RELEASE:       u32 = 0x00008000;
pub val PAGE_READWRITE:    u32 = 0x00000004;

pub val GENERIC_READ:      u32 = 0x80000000;
pub val GENERIC_WRITE:     u32 = 0x40000000;

pub val FILE_SHARE_READ:   u32 = 0x00000001;
pub val FILE_SHARE_WRITE:  u32 = 0x00000002;

pub val OPEN_EXISTING:     u32 = 3;
pub val CREATE_ALWAYS:     u32 = 2;
pub val FILE_ATTRIBUTE_NORMAL: u32 = 0x00000080;

pub val STD_INPUT_HANDLE:  i32 = -10;
pub val STD_OUTPUT_HANDLE: i32 = -11;
pub val STD_ERROR_HANDLE:  i32 = -12;

ext "C:VirtualAlloc"                win32_virtual_alloc:                fun(*u8, u64, u32, u32) *u8;
ext "C:VirtualFree"                 win32_virtual_free:                 fun(*u8, u64, u32) u32;
ext "C:CreateFileW"                 win32_create_file_w:                fun(*u16, u32, u32, *u8, u32, u32, *u8) *u8;
ext "C:ReadFile"                    win32_read_file:                    fun(*u8, *u8, u32, *u32, *u8) u32;
ext "C:WriteFile"                   win32_write_file:                   fun(*u8, *u8, u32, *u32, *u8) u32;
ext "C:CloseHandle"                 win32_close_handle:                 fun(*u8) u32;
ext "C:GetFileSizeEx"               win32_get_file_size_ex:             fun(*u8, *i64) u32;
ext "C:GetStdHandle"                win32_get_std_handle:               fun(u32) *u8;
ext "C:GetEnvironmentStringsW"      win32_get_environment_strings_w:    fun() *u16;
ext "C:FreeEnvironmentStringsW"     win32_free_environment_strings_w:   fun(*u16) u32;
ext "C:QueryPerformanceCounter"     win32_query_performance_counter:    fun(*i64) u32;
ext "C:QueryPerformanceFrequency"   win32_query_performance_frequency:  fun(*i64) u32;

pub fun virt_alloc(size: u64) *u8 {
    if (size == 0) {
        ret nil;
    }

    ret win32_virtual_alloc(nil, size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
}

pub fun virt_free(ptr: *u8, size: u64) u32 {
    if (ptr == nil) {
        ret 0;
    }

    # VirtualFree ignores size when MEM_RELEASE is used; pass 0 per WinAPI requirements.
    ret win32_virtual_free(ptr, 0, MEM_RELEASE);
}

pub fun create_file_read(path: *u16) *u8 {
    if (path == nil) {
        ret nil;
    }

    ret win32_create_file_w(
        path,
        GENERIC_READ,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        nil,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        nil
    );
}

pub fun create_file_write(path: *u16, truncate: u8) *u8 {
    if (path == nil) {
        ret nil;
    }

    var disposition: u32 = OPEN_EXISTING;
    if (truncate != 0) {
        disposition = CREATE_ALWAYS;
    }

    ret win32_create_file_w(
        path,
        GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        nil,
        disposition,
        FILE_ATTRIBUTE_NORMAL,
        nil
    );
}

pub fun read_file(handle: *u8, buffer: *u8, size: u32, read: *u32) u32 {
    if (read != nil) {
        @read = 0;
    }

    if (handle == nil || buffer == nil) {
        ret 0;
    }

    var out_ptr: *u32 = read;
    if (read == nil) {
        out_ptr = nil;
    }

    ret win32_read_file(handle, buffer, size, out_ptr, nil);
}

pub fun write_file(handle: *u8, buffer: *u8, size: u32, written: *u32) u32 {
    if (written != nil) {
        @written = 0;
    }

    if (handle == nil || buffer == nil) {
        ret 0;
    }

    var out_ptr: *u32 = written;
    if (written == nil) {
        out_ptr = nil;
    }

    ret win32_write_file(handle, buffer, size, out_ptr, nil);
}

pub fun close_handle(handle: *u8) u32 {
    if (handle == nil) {
        ret 0;
    }

    ret win32_close_handle(handle);
}

pub fun get_file_size(handle: *u8, out: *i64) u32 {
    if (out != nil) {
        @out = 0;
    }

    if (handle == nil) {
        ret 0;
    }

    var size: i64 = 0;
    val ok: u32 = win32_get_file_size_ex(handle, (?size) :: *i64);
    if (ok == 0) {
        ret 0;
    }

    if (out != nil) {
        @out = size;
    }

    ret ok;
}

pub fun get_std_handle(which: i32) *u8 {
    ret win32_get_std_handle((which :: u32));
}

pub fun free_environment_strings(ptr: *u16) u32 {
    if (ptr == nil) {
        ret 1;
    }

    ret win32_free_environment_strings_w(ptr);
}

pub fun get_environment_strings() *u16 {
    ret win32_get_environment_strings_w();
}

pub fun query_performance_counter(out: *i64) u32 {
    if (out != nil) {
        @out = 0;
    }

    if (out == nil) {
        ret 0;
    }

    ret win32_query_performance_counter(out);
}

pub fun query_performance_frequency(out: *i64) u32 {
    if (out != nil) {
        @out = 0;
    }

    if (out == nil) {
        ret 0;
    }

    ret win32_query_performance_frequency(out);
}
