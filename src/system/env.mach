use std.types.string;

var env_blob_data: *u8;
var env_blob_len: u64;
var env_loaded: u8;

#@if (OS == OS_LINUX)
use fs: std.io.fs;

fun load_env() u8 {
    val blob: []u8 = fs.fs_read_all("/proc/self/environ");

    if (blob.data == nil || blob.len == 0) {
        env_blob_data = nil;
        env_blob_len = 0;
        ret 0;
    }

    env_blob_data = blob.data;
    env_blob_len = blob.len;
    ret 1;
}
#@or (OS == OS_DARWIN)
use mem: std.system.memory;

ext "C:_NSGetEnviron" darwin_ns_get_environ: fun() **u8;

fun copy_c_string(src: *u8) u64 {
    var len: u64 = 0;
    for {
        if (@(src + len) == 0) {
            ret len;
        }
        len = len + 1;
    }

    ret len;
}

fun load_env() u8 {
    val envp_ptr: **u8 = darwin_ns_get_environ();
    if (envp_ptr == nil) {
        ret 0;
    }

    var idx: u64 = 0;
    var total: u64 = 0;

    for {
        val entry: *u8 = @(envp_ptr + idx);
        if (entry == nil) {
            brk;
        }
        total = total + copy_c_string(entry) + 1;
        idx = idx + 1;
    }

    if (total == 0) {
        env_blob_data = nil;
        env_blob_len = 0;
        ret 1;
    }

    val buf: *u8 = mem.allocate(total);
    if (buf == nil) {
        ret 0;
    }

    idx = 0;
    var offset: u64 = 0;
    for {
        val entry: *u8 = @(envp_ptr + idx);
        if (entry == nil) {
            brk;
        }

        val len: u64 = copy_c_string(entry);
        mem.raw_copy(buf + offset, entry, len);
        @(buf + offset + len) = 0;
        offset = offset + len + 1;
        idx = idx + 1;
    }

    env_blob_data = buf;
    env_blob_len = offset;
    ret 1;
}
#@or (OS == OS_WINDOWS)
use mem: std.system.memory;
use sys: std.system.platform.windows.sys;

fun load_env() u8 {
    val wide: *u16 = sys.get_environment_strings();
    if (wide == nil) {
        ret 0;
    }

    var units: u64 = 0;
    var bytes: u64 = 0;
    var consecutive_zero: u8 = 0;

    for {
        val ch: u16 = @(wide + units);
        if (ch == 0) {
            bytes = bytes + 1;
            if (consecutive_zero != 0) {
                units = units + 1;
                brk;
            }
            consecutive_zero = 1;
        }
        or {
            if (ch >= 128) {
                sys.free_environment_strings(wide);
                ret 0;
            }
            bytes = bytes + 1;
            consecutive_zero = 0;
        }
        units = units + 1;
    }

    if (bytes == 0) {
        sys.free_environment_strings(wide);
        env_blob_data = nil;
        env_blob_len = 0;
        ret 1;
    }

    val buf: *u8 = mem.allocate(bytes);
    if (buf == nil) {
        sys.free_environment_strings(wide);
        ret 0;
    }

    var src: u64 = 0;
    var dst: u64 = 0;
    consecutive_zero = 0;
    for (src < units) {
        val ch: u16 = @(wide + src);
        src = src + 1;

        if (ch == 0) {
            @(buf + dst) = 0;
            dst = dst + 1;
            if (consecutive_zero != 0) {
                brk;
            }
            consecutive_zero = 1;
        }
        or {
            @(buf + dst) = ch :: u8;
            dst = dst + 1;
            consecutive_zero = 0;
        }
    }

    sys.free_environment_strings(wide);

    env_blob_data = buf;
    env_blob_len = dst;
    ret 1;
}
#@end

fun ensure_env_blob() u8 {
    if (env_loaded != 0) {
        if (env_blob_data != nil && env_blob_len != 0) {
            ret 1;
        }

        ret 0;
    }

    env_loaded = 1;
    ret load_env();
}

fun find_value(name: string) []u8 {
    if (env_blob_data == nil || env_blob_len == 0) {
        ret []u8{ nil, 0 };
    }

    val target_len: u64 = name.len;
    val data: *u8 = env_blob_data;
    val total: u64 = env_blob_len;

    var pos: u64 = 0;
    for (pos < total) {
        val segment_start: u64 = pos;

        for (pos < total && @(data + pos) != 0) {
            pos = pos + 1;
        }

        val segment_end: u64 = pos;
        val segment_len: u64 = segment_end - segment_start;

        if (segment_len > target_len) {
            var match: u8 = 1;
            var idx: u64 = 0;

            for (idx < target_len) {
                val a: u8 = @(data + segment_start + idx);
                val b: u8 = @(name.data + idx);

                if (a != b) {
                    match = 0;
                    brk;
                }

                idx = idx + 1;
            }

            if (match == 1 && (segment_start + target_len) < segment_end && @(data + segment_start + target_len) == '=') {
                val value_start: u64 = segment_start + target_len + 1;
                val value_len: u64 = segment_len - target_len - 1;

                ret []u8{ data + value_start, value_len };
            }
        }

        if (pos >= total) {
            brk;
        }

        pos = pos + 1;
    }

    ret []u8{ nil, 0 };
}

pub fun env_get(name: string) []u8 {
    if (name.len == 0) {
        ret []u8{ nil, 0 };
    }

    if (ensure_env_blob() == 0) {
        ret []u8{ nil, 0 };
    }

    ret find_value(name);
}

