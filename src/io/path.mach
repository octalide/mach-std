use std.mem;

pub fun is_separator(b: u8) u8 {
    ret (b == '/');
}

pub fun basename(p: []u8) []u8 {
    if (p.length == 0) {
        ret p;
    }

    var i: u64 = p.length;
    for (i > 0) {
        i = i - 1;
        if (p[i] == '/') {
            ret []u8{ p.data + i + 1, p.length - i - 1 };
        }
    }

    ret p;
}

pub fun dirname(p: []u8) []u8 {
    if (p.length == 0) {
        ret p;
    }

    var i: u64 = p.length;
    for (i > 0) {
        i = i - 1;
        if (p[i] == '/') {
            ret []u8{ p.data, i };
        }
    }

    ret []u8{ p.data, 0 };
}

pub fun extname(p: []u8) []u8 {
    var i: u64 = p.length;

    for (i > 0) {
        i = i - 1;

        if (p[i] == '.') { ret []u8{ p.data + i + 1, p.length - i - 1 }; }
        if (p[i] == '/') { brk; }
    }
    
    ret []u8{ p.data + p.length, 0 };
}

pub fun join(a: []u8, b: []u8) []u8 {
    if (a.length == 0) { ret b; }
    if (b.length == 0) { ret a; }

    val need: u64 = a.length + 1 + b.length;
    val p:    *u8 = allocate(need);

    if (p == nil) {
        ret []u8{ nil, 0 };
    }

    raw_copy(p, a.data, a.length);
    @(p + a.length) = '/'::u8;
    raw_copy(p + a.length + 1, b.data, b.length);
    
    ret []u8{ p, need };
}
