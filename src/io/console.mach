use target;
use std.os.linux.sys;
use std.types.string;

pub val STDIN:  i32 = 0;
pub val STDOUT: i32 = 1;
pub val STDERR: i32 = 2;

pub fun print(s: string) {
    val size: u64 = s.length;

    if (size == 0) {
        ret;
    }

    if (OS == OS_LINUX) {
        sys_write(STDOUT, s.data, size);
    }
}

pub fun write_to(dest: i32, s: string) i64 {
    val size: u64 = s.length;

    if (size == 0) {
        ret 0;
    }

    if (OS == OS_LINUX) {
        ret sys_write(dest, s.data, size);
    }

    ret -1;
}

pub fun read_into(dest: *u8, max: u64) i64 {
    if (dest == nil || max == 0) {
        ret 0;
    }

    if (OS == OS_LINUX) {
        ret sys_read(STDIN, dest, max);
    }

    ret -1;
}

pub fun read_from(src: i32, dest: *u8, max: u64) i64 {
    if (dest == nil || max == 0) {
        ret 0;
    }

    if (OS == OS_LINUX) {
        ret sys_read(src, dest, max);
    }

    ret -1;
}
