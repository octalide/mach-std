asm {
.text
.globl syscall0
syscall0:
	mov %rdi, %rax
	syscall
	ret

.globl syscall1
syscall1:
	mov %rdi, %rax
	mov %rsi, %rdi
	syscall
	ret

.globl syscall2
syscall2:
	mov %rdi, %rax
	mov %rsi, %rdi
	mov %rdx, %rsi
	syscall
	ret

.globl syscall3
syscall3:
	mov %rdi, %rax
	mov %rsi, %rdi
	mov %rdx, %rsi
	mov %rcx, %rdx
	syscall
	ret

.globl syscall4
syscall4:
	mov %rdi, %rax
	mov %rsi, %rdi
	mov %rdx, %rsi
	mov %rcx, %rdx
	mov %r8, %r10
	syscall
	ret

.globl syscall5
syscall5:
	mov %rdi, %rax
	mov %rsi, %rdi
	mov %rdx, %rsi
	mov %rcx, %rdx
	mov %r8, %r10
	mov %r9, %r8
	syscall
	ret

.globl syscall6
syscall6:
	mov %rdi, %rax
	mov %rsi, %rdi
	mov %rdx, %rsi
	mov %rcx, %rdx
	mov %r8, %r10
	mov %r9, %r8
	mov 8(%rsp), %r9
	syscall
	ret
};

pub ext syscall0: fun(u64) i64;
pub ext syscall1: fun(u64, u64) i64;
pub ext syscall2: fun(u64, u64, u64) i64;
pub ext syscall3: fun(u64, u64, u64, u64) i64;
pub ext syscall4: fun(u64, u64, u64, u64, u64) i64;
pub ext syscall5: fun(u64, u64, u64, u64, u64, u64) i64;
pub ext syscall6: fun(u64, u64, u64, u64, u64, u64, u64) i64;
